#pragma once
#include <gl/glew.h>
#include <string>
#include <glm/gtc/matrix_transform.hpp>
#include "IchenLib/LoadMesh.h"
#include <unordered_map>

class GraphicsBase
{
public:
	GraphicsBase();
	virtual ~GraphicsBase();

	bool Init_Shaders(const std::string vs, const std::string fs);
	bool Init_Shaders(const std::string vs, const std::string gs,const std::string fs);
	void Load_Model(const std::string model);

	// Get && Set
	GLuint Get_Shader() const { return shader_program; }

	virtual void Draw(glm::mat4 P, glm::mat4 V, glm::mat4 M) = 0;
	virtual void Draw_Shader_Uniforms() = 0;
	virtual void Reload() = 0;
	
	virtual void Init_Buffers() = 0;
	virtual void BufferManage() = 0;
	virtual void ReleaseBuffers() = 0;

protected:
	GLuint shader_program;
	std::string vs_file;
	std::string gs_file;
	std::string fs_file;
	MeshData mesh_data;

	// ImGui Autogenerated
	std::unordered_map<std::string, float> float_uniforms;
	std::unordered_map<std::string, bool> bool_uniforms;
	std::unordered_map<std::string, int> int_uniforms;
	std::unordered_map<std::string, glm::vec3> vec3_uniforms;
	std::unordered_map<std::string, glm::vec4> vec4_uniforms;

private:
};

